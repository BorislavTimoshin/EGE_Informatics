Задача на отрезки.
Пример на основе задачи: https://education.yandex.ru/ege/task/f21ffc71-18b2-48d5-a4b3-5286316264af
C:\Python_Projects\ЕГЭ_Информатика\15. Преобразование логических выражений\Яндекс\Отрезки\Задача 12.py


Клише 1. Выписываем диапазоны, данные в условии, для наглядности. Создаем список lst, хранящий длины отрезков A, для
которых выполняется условие задачи (... при любом значении переменной x). Помним, что если в условии говорится, что x ∈ R, то:
Создаем список numbers, в который вписываем дробные числа с шагом 0.5 из диапазона, охватывающего все диапазоны данные
в условии. То есть если наименьшее значение диапазонов 3, а наибольшее 87, то нам стоит рассмотреть все числа в промежутке,
допустим, от 0 до 100, чтобы всех чисел мы коснулись. Если не учитывать дробность 0.5, то в некоторых случаях решение
будет работать верно лишь с целыми числами и ответ может отличаться на 1. Например, диапазон [100, 200), можем подумать
ответ 200 - 100 - 1 == 99, хотя ответ 100, так как дробные числа (199, 200) нужно учитывать и ДЛИНА равна 200 - 100 == 100
Если x ∈ N, то создаем также, но без дробности, то есть с шагом 1

P = range(3, 88)
Q = range(50, 73)
lst = []
numbers = [0.5 * i for i in range(200)]  # [0, 0.5, 1.0, 1.5, ..., 99.0, 99.5] x ∈ R
# Или
numbers = [i for i in range(100)]  # [0, 1, 2, ..., 98, 99] x ∈ N

Клише 2. Пишем циклы (рассматриваем все диапазоны a). Также, чтобы не было казусов, делаем проверку a2 >= a1,
то есть конечная точка диапазона должна быть больше начальной. Создаем флаг True, означающий, что формула при всех
x была верно выполнена или не при всех:

for a1 in numbers:
    for a2 in numbers:
        if a2 >= a1:
            flag = True

Клише 3. Работаем с x-ами. Создаем цикл for, в котором перебираем все x:

for x in numbers:

Клише 4. Выписываем формулу, пускай в переменную f. (ВНИМАТЕЛЬНО ПЕРЕПИСЫВАТЬ). Диапазоны, данные в формуле изменяем
в виде (P ∈ [3, 87] -> x ∈ P -> x in P -> 3 <= x <= 87). Также изменяем (x ∈ A) на (a1 <= x <= a2).
Обособляем скобками все not. Если в формуле много неравенств вида (x ∈ P), то можно для удобства в переменную pp выписать
3 <= x <= 87 и просто вставлять в формулу переменную pp.

Клише 5. Пишем условие в зависимости от условия задачи. Если говорится:
формула тождественно истинна (то есть принимает значение 1 при любых значениях переменной x), то пишем:
if not f:  # То есть условие задачи не выполнено
    flag = False  # Флаг этого условия меняем, чтобы потом не добавлять длину отрезка в список длин отрезков A
    break  # Выходим из цикла
формула тождевственно ложна (т.е. принимает значение 0) при любом значении переменной x., то пишем:
if f:  # То есть условие задачи не выполнено
    flag = False  # Флаг этого условия меняем, чтобы потом не добавлять длину отрезка в список длин отрезков A
    break  # Выходим из цикла

Клише 6. Импортируем ceil из модуля math. Округлить надо будет концы отрезков, так как концы могут принимать дробные
значения, а если формула работает для данных дробных значениях, то она работает и на всем диапазоне после округления концов
отрезка. Например, a1 = 3.5, a2 = 5.5. Формула будет работать также при этих a, но она тогда также будет работать, напиример
при a1 = 3.1, a2 = 5.8. Значит, чтобы получить длину итогового отрезка, надо округлить a1 вниз, а a2 округлить вверх и
вычесть из второго первое, то есть ceil(a2) - int(a1):

from math import ceil

if flag:
    lst.append(ceil(a2) - int(a1))

Клише 7. Выписываем ответ. Не стоит пугаться ответа 0, такое иногда бывает. Иногда выходит ValueError и ответ является 0
Если требуется наибольшая длина, то выписываем:

print(ceil(max(lst)))

Если наименьшая, то:

print(ceil(min(lst)))


Полный код для наглядности:

from math import ceil

P = range(3, 88)
Q = range(50, 73)
lst = []
numbers = [0.5 * i for i in range(200)]

for a1 in numbers:
    for a2 in numbers:
        if a2 >= a1:
            flag = True
            for x in numbers:
                pp = 3 <= x <= 87
                qq = 50 <= x <= 72
                aa = a1 <= x <= a2
                f = pp and (not (aa == qq)) or (not (qq or aa))
                if not f:
                    flag = False
                    break
            if flag:
                lst.append(ceil(a2) - int(a1))

print(max(lst))




Задача на множества.
Пример на основе задачи: C:\Python_Projects\ЕГЭ_Информатика\15. Преобразование логических выражений\Поляков\4872.py

Клише 1. Записываем функцию, в которой проверяем формулу в задаче:

def f(x, A):
    P = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20}
    Q = {5, 10, 15, 20, 25, 30, 35, 40, 45, 50}
    return ((x in A) <= (x in P)) and ((x in Q) <= (x not in A))

Клише 2. Если требуется найти что-либо наименьшее в множестве A (количесто, сумму, произведение элементов), то пишем:

A = set()
for x in [0.5 * i for i in range(2000)]:  # Цикл for для x зависит от того, какие значения x принимает в условии задачи
    if f(x, A) == 0:  # Равно 0 или 1 в зависимости от условия задачи
        A.add(x)
print(len(A))

Если требуется найти что-либо наибольшее в множестве A (количесто, сумму, произведение элементов), то пишем:

A = set()
for x in [0.5 * i for i in range(2000)]:  # Цикл for для x зависит от того, какие значения x принимает в условии задачи
    A.add(x)
    if f(x, A) == 0:  # Равно 0 или 1 в зависимости от условия задачи
        A.remove(x)
print(len(A))

Клише 3. Выписать ответ в соответствии с условием. Иногда просят выписать не длину, а, например, произведение или сумму
элементов множества A.
