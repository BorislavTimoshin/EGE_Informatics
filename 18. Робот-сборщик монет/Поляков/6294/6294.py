s = """99 38 24 21 12 61 54 38 48 42 37 56 40 52 72 88 90 54 99 94
49 86 51 13 8 7 42 97 9 78 99 38 79 26 32 50 60 36 78 44
18 23 55 61 23 17 63 21 84 75 8 19 8 65 47 64 66 28 52 23
32 11 62 39 49 96 27 30 55 90 62 14 62 50 96 9 96 68 14 43
17 19 85 5 29 45 60 63 71 63 69 20 46 66 76 49 14 70 64 36
86 87 80 60 76 9 15 64 68 20 83 91 45 84 26 19 89 31 87 82
43 17 77 54 8 98 95 86 43 82 33 45 30 31 6 82 39 20 38 7
67 41 11 96 47 22 94 35 93 68 96 10 81 16 47 70 35 62 69 65
75 93 54 11 16 60 58 35 43 31 8 46 88 53 20 74 56 20 29 48
26 67 51 77 14 10 43 16 66 90 80 28 96 69 73 47 27 70 91 84
45 30 75 23 71 80 36 83 55 27 62 47 79 66 20 11 93 92 78 13
65 49 65 51 92 5 47 78 64 68 6 26 57 63 11 80 81 12 88 74
45 87 7 46 5 56 77 90 17 46 51 63 8 13 88 89 58 80 12 52
78 33 16 91 7 59 58 43 73 14 58 80 92 99 84 80 13 92 99 53
41 57 49 23 8 45 84 21 19 21 76 23 35 81 83 40 17 11 47 88
51 22 30 14 16 99 87 12 95 35 34 33 61 93 11 39 41 92 7 47
64 36 33 68 97 30 85 34 20 77 82 36 53 8 98 96 56 73 65 11
54 94 84 28 10 12 16 96 38 37 67 92 24 99 56 50 75 48 75 60
76 60 46 45 23 43 41 63 69 88 36 90 87 30 20 43 67 87 36 9
18 89 70 82 94 68 65 71 27 48 51 94 82 85 71 54 15 53 61 31""".split()


def rec(y, x, lst):
    if y == 0 and x == 19:  # Если мы пришли в правую верхнюю клетку поля
        variations.append(lst)  # То записываем возможный вариант до нее добраться (путь, который мы прошли)
        return
    if y == 0:  # Если мы дошли до первой строки
        # То мы можем дойти до правой верхней клетки, лишь перебираясь по строке вправо
        # То есть увеличивать значение x, а значение y не менять
        if matrix[y][x + 1] % 2 == matrix[y][x] % 2:
            # Так как клетка нам доступна, то записываем ее координаты в список доступных клеток
            accessible_cells.add((y, x + 1,))
            rec(y, x + 1, lst + [matrix[y][x + 1]])
        return  # Прекращаем рекурсию, если не дошли до правой верхней клетки, то есть путь застопорился
    if x == 19:  # Если мы дошли до последнего столбца
        # То мы можем дойти до правой верхней клетки, лишь перебираясь по столбцу вверх
        # То есть уменьшать значение y, а значение x не менять
        if matrix[y - 1][x] % 2 != matrix[y][x] % 2:
            # Так как клетка нам доступна, то записываем ее координаты в список доступных клеток
            accessible_cells.add((y - 1, x,))
            rec(y - 1, x, lst + [matrix[y - 1][x]])
        return  # Прекращаем рекурсию, если не дошли до правой верхней клетки, то есть путь застопорился
    if matrix[y][x + 1] % 2 == matrix[y][x] % 2:  # Если правая клетка подходит, то следуем дальше
        # Так как клетка нам доступна, то записываем ее координаты в список доступных клеток
        accessible_cells.add((y, x + 1,))
        rec(y, x + 1, lst + [matrix[y][x + 1]])
    if matrix[y - 1][x] % 2 != matrix[y][x] % 2:  # Если верхняя клетка доступна, то следуем дальше
        # Так как клетка нам доступна, то записываем ее координаты в список доступных клеток
        accessible_cells.add((y - 1, x,))
        rec(y - 1, x, lst + [matrix[y - 1][x]])
    accessible_cells.add((y - 1, x + 1,))  # Клетка по диагонали нам доступна всегда
    rec(y - 1, x + 1, lst + [matrix[y - 1][x + 1]])


# Создание матрицы, аналога экселевской таблицы
numbers = list(map(int, s))
matrix = []
for i in range(0, 20 * 20, 20):
    matrix.append(numbers[i:i + 20])
variations = []
accessible_cells = {(19, 0,)}  # Множество доступных клеток, начальная клетка доступна

rec(19, 0, [matrix[19][0]])

the_best_variation = max(variations, key=sum)
print(f"Лучший вариант: {the_best_variation}")
print(f"Его сумма: {sum(the_best_variation)}")
amount_of_inaccessible_cells = 20 * 20 - len(accessible_cells)
print(f"Количество недоступных клеток равно число всех клеток - число доступных клеток {amount_of_inaccessible_cells}")
